Class PEX.GCP.PubSub.Service Extends Ens.BusinessService
{

Parameter ADAPTER = "EnsLib.PEX.InboundAdapter";

/// The "Remote Settings" field in the Business Service settings should include the following:
/// <ul>
/// <li><u>LogLevel</u><br/>Default: INFO<br/>Level of detail for the adapter to log to the IRIS Event Log. Possible values, in ascending order of detail are OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE<br/><br/></li>
/// <li><u>InternalQueueSize</u><br/>Default: 1000<br/>The maximum size of the internal message queue. Defaults to 1000</li>
/// <li><u>MessageClass</u><br/>Default: PEX.GCP.PubSub.Msg.Message<br/>The fully qualified name of the IRIS message class that should be sent to OnProcessInput. Unless a custom message type is needed, use the default<br/><br/></li>
/// <li><u>GCPCredentials</u><br/>Default: [NONE]<br/>This is a JSON string generated by GCP. Note: the JSON string should be flattened into only one line -- remove all carriage returns/linefeeds before entering the string into Remote Settings<br/><br/></li>
/// <li><u>GCPProjectID</u><br/>Default: [NONE]<br/>The GCP project that the subscription belongs to<br/><br/></li>
/// <li><u>GCPSubscriptionID</u><br/>Default: [NONE]<br/>The GCP ID for the subscription to receive messages for<br/><br/></li>
/// <li><u>GCPTopicEncoding</u><br/>Default: JSON<br/>The encoding type for messages in this topic. This should be JSON (default) or BINARY and should match the setting in the GCP topic definition<br/><br/></li>
/// </ul>
/// See PEX documentation for more information about the Remote Settings field.
Parameter SETTINGS = "TargetConfigNames:Basic:selector?multiSelect=1&context={Ens.ContextSearch/ProductionItems?targets=1&productionName=@productionId}";

Property TargetConfigNames As %String(MAXLEN = 1000);

Method OnProcessInput(pInput As %RegisteredObject, Output pOutput As %RegisteredObject) As %Status
{
	set tStatus = $$$OK
	set ..%WaitForNextCallInterval=1
	
	if $ISOBJECT(pInput) {
		for i=1:1:$length(..TargetConfigNames,",") {
			Set tStatus = ..SendRequestAsync($piece(..TargetConfigNames,",", i), pInput)
			If $$$ISERR(tStatus) Quit
		}
		set ..%WaitForNextCallInterval=0
	}

	quit tStatus
}

Method OnInit() As %Status
{
	set tStatus = ##super()
	
	throw:'$L(..TargetConfigNames) ##class(%Exception.StatusException).CreateFromStatus($$$ERROR(5001,"Must specify TargetConfigNames"))
	
	quit tStatus
}

ClassMethod OnGetConnections(Output pArray As %String, pItem As Ens.Config.Item)
{
	Do ##super(.pArray,pItem)
	If pItem.GetModifiedSetting("TargetConfigNames",.tValue) {
		For i=1:1:$L(tValue,",") { Set tOne=$ZStrip($P(tValue,",",i),"<>W")  Continue:""=tOne  Set pArray(tOne)="" }
	}
}

}
